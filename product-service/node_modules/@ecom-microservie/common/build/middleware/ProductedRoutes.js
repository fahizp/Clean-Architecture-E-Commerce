"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.isOwner = exports.isAdmin = exports.currentUser = void 0;
const bad_request_error_1 = require("../error/bad-request-error");
const jsonwebtoken_1 = __importDefault(require("jsonwebtoken"));
// Middleware to check if there is a current user logged in and add their details to the request object
const currentUser = (req, res, next) => {
    var _a;
    console.log("Checking current user...");
    if (!((_a = req.session) === null || _a === void 0 ? void 0 : _a.jwt)) {
        console.log("No current user found.");
        return next();
    }
    try {
        const payload = jsonwebtoken_1.default.verify(req.session.jwt, process.env.JWT_KEY);
        console.log(`Current user is ${payload.email}.`);
        req.currentUser = payload;
    }
    catch (error) {
        console.log(error);
    }
    next();
};
exports.currentUser = currentUser;
// Middleware to check if the current user is an admin
const isAdmin = (req, res, next) => {
    console.log("Checking if user is admin...");
    if (!req.currentUser || req.currentUser.email !== "admin@gmail.com") {
        throw new bad_request_error_1.BadRequestError("You are not authorized to perform this action.");
    }
    console.log("User is an admin.");
    next();
};
exports.isAdmin = isAdmin;
// Middleware to check if the current user is the owner of a specific resource
const isOwner = (req, res, next) => {
    console.log("Checking if user is the owner of this resource...");
    const { userId } = req.params;
    if (!req.currentUser || req.currentUser.id !== userId) {
        throw new bad_request_error_1.BadRequestError("You are not authorized to perform this action.");
    }
    console.log("User is the owner of this resource.");
    next();
};
exports.isOwner = isOwner;
